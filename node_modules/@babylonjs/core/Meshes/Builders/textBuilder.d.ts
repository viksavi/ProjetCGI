import type { Scene } from "../../scene";
import type { Nullable } from "../../types";
import { Mesh } from "../mesh";
/**
 * Parser inspired by https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/FontLoader.js
 */
/**
 * Represents glyph data generated by http://gero3.github.io/facetype.js/
 */
export interface IGlyphData {
    /** Commands used to draw (line, move, curve, etc..) */
    o: string;
    /** Width */
    ha: number;
}
/**
 * Represents font data generated by http://gero3.github.io/facetype.js/
 */
export interface IFontData {
    /**
     * Font resolution
     */
    resolution: number;
    /** Underline tickness */
    underlineThickness: number;
    /** Bounding box */
    boundingBox: {
        yMax: number;
        yMin: number;
    };
    /** List of supported glyphs */
    glyphs: {
        [key: string]: IGlyphData;
    };
}
/**
 * Create a text mesh
 * @param name defines the name of the mesh
 * @param text defines the text to use to build the mesh
 * @param fontData defines the font data (can be generated with http://gero3.github.io/facetype.js/)
 * @param options defines options used to create the mesh
 * @param scene defines the hosting scene
 * @returns a new Mesh
 * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/text
 */
export declare function CreateText(name: string, text: string, fontData: IFontData, options?: {
    size?: number;
    resolution?: number;
    depth?: number;
    sideOrientation?: number;
}, scene?: Nullable<Scene>): Nullable<Mesh>;
